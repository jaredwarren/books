// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Books": Application User Types
//
// Command:
// $ goagen
// --design=github.com/jaredwarren/redeam/design
// --out=$(GOPATH)/src/github.com/jaredwarren/redeam
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"time"
)

// bookPayload user type.
type bookPayload struct {
	// Author(s) of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Date of publication
	PublishDate *time.Time `form:"publish_date,omitempty" json:"publish_date,omitempty" xml:"publish_date,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	Rating    *int    `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	Status    *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Book title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Finalize sets the default values for bookPayload type instance.
func (ut *bookPayload) Finalize() {
	var defaultRating = 2
	if ut.Rating == nil {
		ut.Rating = &defaultRating
	}
}

// Validate validates the bookPayload type instance.
func (ut *bookPayload) Validate() (err error) {
	if ut.Rating != nil {
		if *ut.Rating < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 1, true))
		}
	}
	if ut.Rating != nil {
		if *ut.Rating > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.rating`, *ut.Rating, 3, false))
		}
	}
	if ut.Status != nil {
		if !(*ut.Status == "CheckedIn" || *ut.Status == "CheckedOut") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.status`, *ut.Status, []interface{}{"CheckedIn", "CheckedOut"}))
		}
	}
	return
}

// Publicize creates BookPayload from bookPayload
func (ut *bookPayload) Publicize() *BookPayload {
	var pub BookPayload
	if ut.Author != nil {
		pub.Author = ut.Author
	}
	if ut.ID != nil {
		pub.ID = ut.ID
	}
	if ut.PublishDate != nil {
		pub.PublishDate = ut.PublishDate
	}
	if ut.Publisher != nil {
		pub.Publisher = ut.Publisher
	}
	if ut.Rating != nil {
		pub.Rating = *ut.Rating
	}
	if ut.Status != nil {
		pub.Status = ut.Status
	}
	if ut.Title != nil {
		pub.Title = ut.Title
	}
	return &pub
}

// BookPayload user type.
type BookPayload struct {
	// Author(s) of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Book ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Date of publication
	PublishDate *time.Time `form:"publish_date,omitempty" json:"publish_date,omitempty" xml:"publish_date,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	Rating    int     `form:"rating" json:"rating" xml:"rating"`
	Status    *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Book title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the BookPayload type instance.
func (ut *BookPayload) Validate() (err error) {
	if ut.Rating < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 1, true))
	}
	if ut.Rating > 3 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`type.rating`, ut.Rating, 3, false))
	}
	if ut.Status != nil {
		if !(*ut.Status == "CheckedIn" || *ut.Status == "CheckedOut") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.status`, *ut.Status, []interface{}{"CheckedIn", "CheckedOut"}))
		}
	}
	return
}
