// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Books": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/jaredwarren/redeam/design
// --out=$(GOPATH)/src/github.com/jaredwarren/redeam
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateBookContext provides the book create action context.
type CreateBookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *BookPayload
}

// NewCreateBookContext parses the incoming request URL and body, performs validations and creates the
// context used by the book controller create action.
func NewCreateBookContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBookContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateBookContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateBookContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteBookContext provides the book delete action context.
type DeleteBookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewDeleteBookContext parses the incoming request URL and body, performs validations and creates the
// context used by the book controller delete action.
func NewDeleteBookContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBookContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["bookID"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("bookID", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`bookID`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteBookContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBookContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteBookContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListBookContext provides the book list action context.
type ListBookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBookContext parses the incoming request URL and body, performs validations and creates the
// context used by the book controller list action.
func NewListBookContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBookContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBookContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBookContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowBookContext provides the book show action context.
type ShowBookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewShowBookContext parses the incoming request URL and body, performs validations and creates the
// context used by the book controller show action.
func NewShowBookContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBookContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["bookID"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("bookID", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`bookID`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBookContext) OK(r *Book) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBookContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowBookContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateBookContext provides the book update action context.
type UpdateBookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID  int
	Payload *BookPayload
}

// NewUpdateBookContext parses the incoming request URL and body, performs validations and creates the
// context used by the book controller update action.
func NewUpdateBookContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateBookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateBookContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["bookID"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("bookID", rawBookID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateBookContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBookContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateBookContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}
